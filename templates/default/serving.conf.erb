
input {
  beats {
    port => <%= node['logstash']['beats']['serving_port'] %>
  }
}

# Ingest serving logs from source [fields][source]:
# - "local", includes [fields][model_server]
# - "kube", from mode [kubernetes][labels][serving_hops_works/tool]:          
#          - "default"    includes [kubernetes][labels]
#          - "kserve"     includes [kubernetes][labels]

filter {
  if [message] =~ /^\s*$/ {
    drop { }
  }

  # (EE) Kubernetes serving logs
  if [fields][source] == "kube" {
    mutate {
      add_field => [ "model_name", "%{[kubernetes][labels][serving_hops_works/model-name]}"]
    }
    mutate {
      add_field => [ "model_version", "%{[kubernetes][labels][serving_hops_works/model-version]}" ]
    }
    mutate {
      add_field => [ "project_id", "%{[kubernetes][labels][serving_hops_works/project-id]}" ]
    }
    mutate {
      add_field => [ "project_name", "%{[kubernetes][namespace]}"]
    }
    mutate {
      gsub => [ "project_name", "[-]", "_" ]
    }
    mutate {
      add_field => [ "serving_id", "%{[kubernetes][labels][serving_hops_works/id]}" ]
    }
    mutate {
      add_field => [ "serving_name", "%{[kubernetes][labels][serving_hops_works/name]}" ]
    }
    mutate {
      add_field => [ "serving_tool", "%{[kubernetes][labels][serving_hops_works/tool]}" ]
    } 
    mutate {
      add_field => [ "model-server", "%{[kubernetes][labels][serving_hops_works/model-server]}" ]
    }

    # KServe
    if [kubernetes][labels][serving_hops_works/tool] == "kserve" {
      dissect {
        mapping => { "message" => "%{log_message}" }
      }
      mutate {
        add_field => [ "serving_component", "%{[kubernetes][labels][component]}" ]
      }
      mutate {
        add_field => [ "container_name", "%{[kubernetes][container][name]}" ]
      }

    # Kubernetes default (docker-images)
    } else if [kubernetes][labels][serving_hops_works/tool] == "default" {

      # Tensorflow serving
      if [kubernetes][labels][serving_hops_works/model-server] == "tensorflow_serving" {
        dissect {
          mapping => {"message" => "%{templogdate} %{+templogdate}: %{priority} %{logger_name} %{log_message}"}
        }   
      # Python (sklearn)
      } else if [kubernetes][labels][serving_hops_works/model-server] == "python" {
        dissect {
          mapping => { "message" => "%{log_message}" }
        }

      # Drop unknown model server
      } else {
        drop {}
      } 

    # Drop unknown serving mode
    } else {
      drop {}
    }

  # Local serving logs
  } else if [fields][source] == "local" {

    # Message pattern: Tensorflow
    if [fields][model_server] == "tensorflow_serving" {
      dissect {
          mapping => {"message" => "%{project_name},%{serving_name} %{templogdate} %{+templogdate}: %{priority} %{logger_name} %{log_message}"}
          add_field => {"model_name" => "%{serving_name}"}
      }

    # Message pattern: Scikit-learn
    } else if [fields][model_server] == "python" {
      dissect {
          mapping => {"message" => "%{project_name},%{serving_name} %{log_message}"}
          add_field => {"model_name" => "%{serving_name}"}
      }

    # Drop unknown model server
    } else {
      drop { }
    }

  # Drop unknown source
  } else {
    drop {}
  }

  # Common actions

  #Ignore failed parse entries. Dissect filter patterns can be tested with https://dissect-tester.jorgelbg.me/
  if "_dissectfailure" in [tags] {
    drop { }
  }

  date {
    match  => [ "templogdate", ISO8601 ]
    target => "logdate"
  }

  mutate {
    remove_field => [ "[host]" ]
  }
  mutate {
    add_field => [ "host", "%{[agent][hostname]}" ]
  }
  if ![log_message] or [log_message] =~ /^\s*$/ {
    drop { }
  }
  mutate {
    remove_field => [ "message", "source", "fields", "kubernetes", "container", "input", "tags", "stream", "templogdate", "prospector", "agent", "jobinfo", "log", "input", "ecs"]
  }
}

output {
  opensearch {
    hosts => [<%= @elastic_addr %>]
    index => "%{project_name}_serving-%{+YYYY.MM.dd}"
    <% if node['elastic']['opensearch_security']['enabled'] %>
    user => "<%=node['elastic']['opensearch_security']['logstash']['username']%>"
    password => "<%=node['elastic']['opensearch_security']['logstash']['password']%>"
    <% if node['elastic']['opensearch_security']['https']['enabled'] %>
    cacert => "<%= @hops_ca %>"
    ssl => true
    <% end %>
    <% end %>
  }
}
