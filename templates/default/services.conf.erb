input {
  pipeline {
    address => <%= @address %>
  }
}

filter {

  grok {
    pattern_definitions => {"SERVICE_NAME" => "(namenode|resourcemanager|nodemanager|datanode|hive|domain1|nodes|mysql-cluster|onlinefs|kafka|epipe|flyingduck)"}
    match => {"[log][file][path]" => "%{NOTSPACE}%{SERVICE_NAME:service}%{NOTSPACE}.log"}
  }

  if ([service] == "domain1" or [service] == "nodes") {
    mutate { update => {"service" => "domain1" } }
    grok {
      # [#|DATETIME|LOG_LEVEL|PRODUCT_ID|LOGGER NAME|OPTIONAL KEY VALUE PAIRS| MESSAGE|#]
      # Date format: 2021-08-09T15:56:26.257+0000
      match => {"message" => "\[#\|%{NOTSPACE:templogdate}\|%{LOGLEVEL:priority}\|%{DATA:product_id}\|%{DATA:logger_name}\|%{GREEDYDATA:key_value_pairs}\|%{GREEDYDATA:log_message}\|#\]"}
    }
  }  else if [service] == "mysql-cluster" {
    dissect {
      mapping => {"[log][file][path]" => "%{}/mysql-cluster/log/%{rondb_log}.log"}
    }
    mutate { update => {"service" => "rondb" } } 
    if [rondb_log] == "cluster" {
      mutate { add_field => {"rondb_node" => "mgm" } }
      # default RonDB log format the should cover cluster.log and ndb_X_out.log and part of mysql_X_out.log
      # 2022-12-15 15:01:12 [NdbApi] INFO     -- Node 1 disconnected in recv
      dissect {
        mapping => {"message" => "%{templogdate} %{+templogdate} [%{logger_name}] %{priority} %{?blank}-- %{log_message}"}
      }
    } else {
      dissect {
      	mapping => {"[rondb_log]" => "%{rondb_node}_%{rondb_nodeid}_out"}
      }
      if [rondb_node] == "mysql" {
          # RonDB info logs 
          if [message] =~ /^.*\[RonDB\].*$/ {
            # try with RonDB connection info logs
            # 2022-12-15 15:02:18:[RonDB] (N68) Node 1 Connected
            dissect {
              mapping => {"message" => "%{templogdate} %{+templogdate}:[%{logger_name}] (N%{api_slot}) %{log_message}"}
            }
            mutate { add_field => {"priority" => "INFO" } }
          }
          # Server/InnoDB logs 
          else if [message] =~ /^.*[MY.*].*$/ {
            # 2022-12-15T16:51:19.707278Z 0 [System] [MY-010116] [Server] /srv/hops/mysql/bin/mysqld (mysqld 21.04.9-cluster) starting as process 12677
            dissect {
              mapping => {"message" => "%{templogdate} %{thread} [%{priority}] %{logger_name} %{+logger_name} %{log_message}"}
            }
            mutate { add_field => {"parse_iso" => "true" } }
          }
          # default 
          else {
            # default RonDB log format the should cover cluster.log and ndb_X_out.log and part of mysql_X_out.log
            # 2022-12-15 15:01:12 [NdbApi] INFO     -- Node 1 disconnected in recv
            dissect {
              mapping => {"message" => "%{templogdate} %{+templogdate} [%{logger_name}] %{priority} %{?blank}-- %{log_message}"}
            }
          }
      } else if [rondb_node] == "ndb" {
        # MGMD set client 0x7fb9b00019a0 version to 21.04.9
        if [message] =~ /^MGMD.*/ {
          dissect { mapping => {"message" => "%{log_message}"}}
          mutate {
            add_field => {"templogdate" => "%{@timestamp}" }
            add_field => {"parse_iso" => "true" }
            add_field => {"priority" => "INFO" }
            update => {"rondb_node" => "mgm" }
          }
        } else {
          # default RonDB log format the should cover cluster.log and ndb_X_out.log and part of mysql_X_out.log
          # 2022-12-15 15:01:12 [NdbApi] INFO     -- Node 1 disconnected in recv
          dissect {
            mapping => {"message" => "%{templogdate} %{+templogdate} [%{logger_name}] %{priority} %{?blank}-- %{log_message}"}
          }
        }
      }
   }
  } else if [service] == "hive" {
     dissect {
      mapping => {"message" => "%{templogdate} %{priority} %{logger_name}: %{log_message}"}
    }
  } else if [service] == "kafka" {
    dissect {
      mapping => {"[log][file][path]" => "%{}/logs/kafka%{kafka_mod}.log"}
    }
    if [kafka_mod] == "-gc" {
       dissect {
         mapping => {"message" => "%{templogdate}:%{+templogdate}: %{gc_time}: %{log_message}"}
       }
      mutate {
        add_field => {
          "logger_name" => "GC"
        }
      }
    } else {
      dissect {
        mapping => {"message" => "%{templogdate} %{+templogdate} %{priority} %{logger_name}: %{log_message}"}
      }
    }
  } else if [service] == "epipe" {
    # 2022-Dec-16 10:44:28.720739:[info]- (ClusterConnectionBase.cpp:55:connect_to_cluster) Succefully connected to NDB cluster with NodeId 191
    dissect {
        mapping => {"message" => "%{templogdate} %{+templogdate}:[%{priority}]- (%{logger_name}) %{log_message}"}
    }
  } else if [service] == "flyingduck" {
    dissect {
        # 2023-02-22 14:24:23,931 INFO main(263) Serving on grpc+tls://flyingduck.service.consul:5005
        mapping => {"message" => "%{templogdate} %{+templogdate} %{priority} %{logger_name} %{log_message}"}
    }
  } else if [service] == "onlinefs" {
    dissect {
      mapping => {"message" => "%{templogdate} %{+templogdate} %{priority} %{logger_name}: %{log_message}"}
    }
    clone {
      clones => ["service_log"]
    }
    if [type] != "service_log" {
      json {
        source => "log_message"
        skip_on_invalid_json => true
      }
      if [log_arguments][project_id] {
        mutate { add_tag => [ "project_log" ] }
      } else {
        # we should drop it because we already cloned one
        drop{}
      }
    }
  } else {
    # Rest of the log4j services
    # namenode, datanode, resourcemanager, nodemanager
    dissect {
      mapping => {"message" => "%{templogdate} %{priority} %{logger_name}: %{log_message}"}
    }
  }

  #Ignore failed parse enties. Grok filter has been tested with http://grokconstructor.appspot.com
  if "_grokparsefailure" in [tags] {
    drop { }
  }

  #Ignore failed parse entries. Dissect filter patterns can be tested with https://dissect-tester.jorgelbg.me/
  if "_dissectfailure" in [tags] {
      drop { }
  }

  mutate {
    update => {
     "host" => "%{[agent][hostname]}"
    }
  }

  if [service] == "rondb" and [parse_iso] != "true" {
    date {
      match => [ "templogdate", "yyyy-MM-dd HH:mm:ss" ]
      target => "logdate"
    }
  } else if [service] == "epipe" {
    date {
      match => [ "templogdate", "yyyy-MMM-dd HH:mm:ss.SSSSSS" ]
      target => "logdate"
    }
  } else {
    date {
      match  => [ "templogdate", ISO8601 ]
      target => "logdate"
    }
  }

  mutate {
    remove_field => ["message", "source" , "templogdate", "prospector", "agent", "jobinfo", "log", "input", "ecs", "key_value_pairs", "kafka_mod", "rondb_log", "parse_iso"]
  }
  <% if @http_output -%>
  truncate {
    fields => "log_message"
    length_bytes => "<%=node['logstash']['managed_cloud']['max_size']%>"
  }
  <% end -%>
}

output {
  <% if @elastic_output -%>
  if "project_log" in [tags] {
    opensearch {
      hosts => [<%= @elastic_addr %>]
      index => "onlinefs_%{[log_arguments][project_id]}-%{+YYYY.MM.dd}"
      <% if node['elastic']['opensearch_security']['enabled'] %>
        user => "<%=node['elastic']['opensearch_security']['logstash']['username']%>"
        password => "<%=node['elastic']['opensearch_security']['logstash']['password']%>"
        <% if node['elastic']['opensearch_security']['https']['enabled'] %>
          cacert => "<%= @hops_ca %>"
          ssl => true
        <% end %>
      <% end %>
    }
  } else {
    opensearch {
      hosts => [<%= @elastic_addr %>]
      index => "<%= node['logstash']['service_index'] %>%{+YYYY.MM.dd}"
      <% if node['elastic']['opensearch_security']['enabled'] %>
        user => "<%=node['elastic']['opensearch_security']['logstash']['username']%>"
        password => "<%=node['elastic']['opensearch_security']['logstash']['password']%>"
        <% if node['elastic']['opensearch_security']['https']['enabled'] %>
          cacert => "<%= @hops_ca %>"
          ssl => true
        <% end %>
      <% end %>
    }
  }
  <% end -%>

  <% if @http_output -%>
  http {
    format => "json_batch"
    headers => ["x-api-key", "API_KEY"]
    http_compression => false
    http_method => "post"
    url => "URL"
    follow_redirects => false
  }
  <% end -%>
}
